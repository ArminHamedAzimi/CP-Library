{
  "Modular Arithmetic Template": {
    "prefix": "modeint",
    "body": [
      "template <const int &MOD>",
      "struct MInt {",
      "    int val;",
      "",
      "    MInt (long long x = 0) {",
      "        if (x < 0)",
      "            x = x % MOD + MOD;",
      "        if (x > MOD)",
      "            x %= MOD;",
      "        val = x;",
      "    }",
      "",
      "    MInt inverse() {",
      "        int u = 1, v = 0;",
      "        int a = val, pr = MOD;",
      "        while(a != 0) {",
      "            int dv = pr / a;",
      "            pr -= dv * a; v -= dv * u;",
      "            swap(a, pr); swap(u, v);",
      "        }",
      "        assert(pr == 1);",
      "        return v;",
      "    }",
      "",
      "    explicit operator int() const { ",
      "        return val; ",
      "    }",
      "    explicit operator unsigned() const { ",
      "        return val;",
      "    }",
      "    explicit operator long long() const {",
      "        return val;",
      "    }",
      "    explicit operator double() const {",
      "        return val;",
      "    }",
      "    explicit operator long double() const {",
      "        return val;",
      "    }",
      "",
      "    MInt & operator += (const MInt &x) {",
      "        val += x.val;",
      "        if (val >= MOD)",
      "            val -= MOD;",
      "        return *this;",
      "    }",
      "    MInt & operator -= (const MInt &x) {",
      "        val -= x.val;",
      "        if (val < 0)",
      "            val += MOD;",
      "        return *this;",
      "    }",
      "    MInt & operator *= (const MInt &x) {",
      "        val = 1ll * val * x.val % MOD;",
      "        return *this;",
      "    }",
      "    MInt & operator /= (const MInt &x) {",
      "        return *this *= x.inverse();",
      "    }",
      "",
      "    friend MInt operator + (const MInt &a, const MInt &b) { ",
      "        return MInt(a) += b;",
      "    }",
      "    friend MInt operator - (const MInt &a, const MInt &b) { ",
      "        return MInt(a) -= b;",
      "    }",
      "    friend MInt operator * (const MInt &a, const MInt &b) { ",
      "        return MInt(a) *= b;",
      "    }",
      "    friend MInt operator / (const MInt &a, const MInt &b) { ",
      "        return MInt(a) /= b;",
      "    }",
      "    MInt & operator ++ () {",
      "        if (val == MOD - 1)",
      "            val = 0;",
      "        else",
      "            val++;",
      "        return *this;",
      "    }",
      "    MInt & operator -- () {",
      "        if (val == 0)",
      "            val = MOD - 1;",
      "        else",
      "            val--;",
      "        return *this;",
      "    }",
      "    MInt operator - () const {",
      "        return MInt(-this->val);",
      "    }",
      "",
      "    friend bool operator == (const MInt &a, const MInt &b) { ",
      "        return a.val == b.val;",
      "    }",
      "    friend bool operator != (const MInt &a, const MInt &b) { ",
      "        return a.val != b.val;",
      "    }",
      "    friend bool operator <= (const MInt &a, const MInt &b) { ",
      "        return a.val <= b.val;",
      "    }",
      "    friend bool operator >= (const MInt &a, const MInt &b) { ",
      "        return a.val >= b.val;",
      "    }",
      "    friend bool operator < (const MInt &a, const MInt &b) { ",
      "        return a.val < b.val;",
      "    }",
      "    friend bool operator > (const MInt &a, const MInt &b) { ",
      "        return a.val > b.val;",
      "    }",
      "",
      "    MInt Pow(long long b) {",
      "        if (b == 0)",
      "            return 1;",
      "        if (b < 0)",
      "            return inverse().Pow(-b);",
      "",
      "        auto k = Pow(b / 2);",
      "        k *= k;",
      "        if (b & 1)",
      "            k *= *this;",
      "",
      "        return k;",
      "    }",
      "",
      "    friend ostream & operator << (ostream &os, const MInt &m) {",
      "        return os << m.val;",
      "    }",
      "};",
      "",
      "const int P = ${1|1000000007, 998244353|};",
      "using Mint = MInt<P>;",
      "const int MAX_COM = 1e6 + 10;",
      "",
      "Mint fac[MAX_COM], invfac[MAX_COM], inv[MAX_COM];",
      "",
      "void preCalc() {",
      "    fac[0] = invfac[0] = fac[1] = invfac[1] = inv[1] = 1;",
      "    for (int i = 2; i < MAX_COM; i++) {",
      "        fac[i] = fac[i - 1] * i;",
      "        inv[i] = -inv[P % i] * (P / i);",
      "        invfac[i] = invfac[i - 1] * inv[i];",
      "    }",
      "}",
      "",
      "Mint C(int r, int n) {",
      "    if (r < 0 || r > n)",
      "        return 0;",
      "    if (fac[0] == 0)",
      "        preCalc();",
      "",
      "    return fac[n] * invfac[r] * invfac[n - r];",
      "}",
      "$0"
    ],
    "description": "Template for modular arithmetic in C++"
  }
}
